%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5d409ea383417324bafa2ad8119d2992, type: 3}
  m_Name: 6_Observer_Data
  m_EditorClassIdentifier: 
  m_Title: Observer
  m_TextPages:
  - "The <b>observer pattern</b> creates a 'one-to-many' dependency among objects,
    enabling automatic updates in response to state changes.\n\n<b>Click</b> the
    button to invoke an event. \n\nEach observer reacts uniquely to the subject's
    state changes: playing sounds, triggering animations, or launching particle effects."
  - 'This pattern ensures that when one object, known as the <b>subject</b>, alters
    its state, all dependent objects, referred to as <b>observers</b>, receive notifications.


    Because
    this pattern is ubiquitous in software design, Unity and C# offer built-in solutions
    that don''t require custom implementation. '
  - "Use Unity Events and System.Actions to create loose coupling between components.
    Also, the UI Toolkit provides its own specialized event system. \n\nThese tools
    allow you to create flexible and modular systems that communicate without tightly
    linking them. "
  - "In this example, various observers \u2014 such as audio, animation, and particle
    systems \u2014 respond independently without any knowledge of each other, showing
    how decoupled systems can interact.\n\nThis setup promotes reusability and modularity."
  m_CurrentIndex: 0
  m_AdditionalText: <b>Click</b> the button to make the observers react.
  m_FooterText: 
